#!/bin/bash

#
# Copyright (C) 2020 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

PASSWORD=$(cat /var/lib/nethserver/secrets/mssql)
BACKUPDIR="/var/lib/nethserver/backup/mssql"

# check if master backup exists
if [[ ! -f ${BACKUPDIR}/master.bak ]]; then
  exit 0
fi

# set right permissions on backup dir
/bin/chown -R mssql:mssql ${BACKUPDIR}

if systemctl is-active --quiet mssql-server.service; then
  # stop mssql-server if is active
  systemctl stop mssql-server.service
  
  # wait mssql stop
  sleep 5
fi

# disable sqlagent
/opt/mssql/bin/mssql-conf set sqlagent.enabled false

# start mssql-server in single user mode
systemd-run --setenv=HOME=/root --unit='mssql-single' --uid='mssql' /opt/mssql/bin/sqlservr -m

# wait mssql start
while !(systemctl status mssql-single.service --lines=30 | grep 'Recovery is complete') do
  sleep 1
done

echo "[NOTICE] Restoring master database"

# restore master databases
/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${PASSWORD} -Q "
RESTORE DATABASE [master] FROM DISK = N'${BACKUPDIR}/master.bak' WITH FILE = 1, NOUNLOAD, REPLACE, STATS = 5;"

if systemctl is-active --quiet mssql-single.service; then
  # stop mssql-server if is active
  systemctl stop mssql-single.service
fi

# wait mssql stop
sleep 5

# enable sqlagent
/opt/mssql/bin/mssql-conf set sqlagent.enabled true

# start mssql-server normally
systemctl start mssql-server.service

# wait mssql start
while !(systemctl status mssql-server.service --lines=30 | grep 'Recovery is complete') do
  sleep 1
done

# restore databases
for DB in $(cat ${BACKUPDIR}/db-list)
do
  # avoid master restore
  if [[ ${DB} != "master" ]]; then
    
    echo "[NOTICE] Restoring ${DB} database"
    
    # check if are sysdb
    if [[ ${DB} != "model" ]] && [[ ${DB} != "msdb" ]]; then
      # drop existing database
      QUERY="DROP DATABASE IF EXISTS ${DB};"
      # prepare restore query
      QUERY="${QUERY} RESTORE DATABASE [${DB}] FROM DISK = N'${BACKUPDIR}/${DB}.bak' WITH FILE = 1, NOUNLOAD, REPLACE, NORECOVERY, STATS = 5;"
      # restore logs if db are not sysdb
      QUERY="${QUERY} RESTORE LOG [${DB}] FROM DISK = N'${BACKUPDIR}/${DB}_LOG.bak';"
    else
      # set single-user db
      QUERY="ALTER DATABASE ${DB} SET SINGLE_USER WITH ROLLBACK IMMEDIATE;"
      # prepare restore query for sysdb
      QUERY="${QUERY} RESTORE DATABASE [${DB}] FROM DISK = N'${BACKUPDIR}/${DB}.bak' WITH FILE = 1, NOUNLOAD, REPLACE, STATS = 5;"
      # set multi-user db
      QUERY="${QUERY} ALTER DATABASE ${DB} SET MULTI_USER;"
    fi
    
    # execute query
    /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${PASSWORD} -Q "${QUERY}"
  fi
done